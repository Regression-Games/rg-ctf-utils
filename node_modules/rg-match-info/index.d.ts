
/**
 * This matches the types defined in RGMatchInfo of regression-games-core.
 * This is used as the data container sent to bots to expose RG match information to their decision-making process.
 */
declare module 'rg-match-info' {

    export interface RGMatchInfoRequest {
        requestType: RGMatchInfoRequestType,
        matchInfo: RGMatchInfo,
        playerName: string,
        team: string
    }

    export enum RGMatchInfoRequestType {
        SCORE_UPDATE, PLAYER_JOINED, PLAYER_LEFT, MATCH_STARTED, MATCH_ENDED
    }

    export interface RGMatchInfo {
        /** The teams and players in the match including score information.  Note that the teams list may be empty for some games */
        teams: RGTeam[]
        players: RGPlayer[]
        /** The start time of the match, null if the match hasn't started yet.  This can happen as players join before the match can start */
        startTime: Date
        /** The original timeLimit of the match in seconds, or -1 if no time limit
         * @deprecated Use gameMetadata.timeLimit
         */
        timeLimit: number
        /** The time remaining in the match in seconds if timeLimit >0, or -1 if no time limit */
        timeRemaining(): number
        gameMetadta: GameMetadata
    }

    export interface RGTeam {
        name: string
        /** The accumulated score value for the team */
        metadata: RGScoreMetadata
    }

    /** This is a common model for humans and bots, because it assumes that bot specific things wouldn't be exposed to all players
     *  Bot specific things would be in the BotAllocation which is only visible to the bot that got loaded with it (git repos, extra configs, etc)
     */
    export interface RGPlayer {
        isConnected: boolean
        isBot: boolean
        username: string
        /** The name of the team this player is on.  May not be populated for all games or game modes */
        team: string
        metadata: RGScoreMetadata
    }

    export interface RGScoreMetadata {
        score: number
        kills: number
        assists: number
        deaths: number
        flagCarrierKills: number
        flagPickups: number
        flagCaptures: number
        flagDrops: number
        deathsWithFlag: number
    }

    export interface GameMetadata {
        /** The timeLimit for the match in seconds */
        timeLimit: number,
        /** The scoreLimit for the match */
        scoreLimit: number,
        /** The objective limit for the match. Objective limit is usable across multiple game modes.  Examples: Number of CTF flag captures, Number of control points held, etc. */
        objectiveLimit: number,
        playersPerTeam: number,
        humansPerTeam: number,
    }

}
